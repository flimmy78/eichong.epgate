package com.cooperate.TCEC.util;

import com.cooperate.CooperateFactory;
import com.cooperate.utils.AesCBC;
import com.cooperate.utils.HttpUtils;
import com.cooperate.utils.SigTool;
import com.cooperate.utils.Strings;
import com.ec.constants.Symbol;
import com.ec.utils.DateUtil;
import com.ec.utils.NumUtil;
import net.sf.json.JSONObject;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.math.BigDecimal;
import java.util.*;

/**
 * Created by zangyaoyi on 2017/11/6.
 */
public class CommonPush {
    private static final Logger LOGGER = LoggerFactory.getLogger(CommonPush.class);


    public static Map<String, Object> getOnChargeEpRespByExtra(String extra) {
        Map<String, Object> resMap = new HashMap<>(5);
        String[] val = extra.split(Symbol.SHUXIAN_REG);
        resMap.put("StartChargeSeq", val[0]);
        resMap.put("StartChargeSeqStat", Integer.valueOf(val[1]));
        resMap.put("ConnectorID", val[2]);
        resMap.put("StartTime", val[3]);
        resMap.put("IdentCode", "123456");
        return resMap;
    }

    public static Map<String, Object> getOnStopChargeEpRespByExtra(String epCode, int epGunNo, String extra) {
        Map<String, Object> resMap = new HashMap<>(5);
        resMap.put("StartChargeSeq", extra);
        resMap.put("StartChargeSeqStat", 4);
        resMap.put("ConnectorID", String.format("%s%02d", epCode, epGunNo));//pile_code 是 string 充电桩编码
        resMap.put("SuccStat", 0);
        resMap.put("FailReason", 0);
        return resMap;
    }

    public static Map<String, Object> getOnEpStatusChange(String connectorID, Map<String, Object> realData) {
        HashMap<String, Object> resMap = new HashMap<String, Object>();
        resMap.put("ConnectorID", connectorID);//pile_code 是 string 充电桩编码
        int status = Strings.getIntValue(realData, "3_1");
        //操作中不推送
        resMap.put("Status", status);
        if (status == 1 || status > 30) {
            resMap.put("Status", 255);
        } else if (status == 2) {
            resMap.put("Status", 1);
        } else if (status == 9 || status == 10 || status == 11 || status == 12) {
            resMap.put("Status", 2);
        } else if (status == 8) {
            resMap.put("Status", 4);
        }

        resMap.put("ParkStatus", 0);//parking_state 否 int 车位状态:0:未知 1:空闲 2:占用 3:故障
        resMap.put("LockStatus", 0);//地锁
        List<Map<String, Object>> list = new ArrayList<>();
        list.add(resMap);

        Map<String, Object> encData = new HashMap<>();
        encData.put("ConnectorStatusInfo", list);

        return encData;
    }

    public static Map<String, Object> getOnRealData(String epCode, int epGunNo, Map<String, Object> realData, float servicePrice, String extra) {
        HashMap<String, Object> resMap = new HashMap<String, Object>();
        resMap.put("StartChargeSeq", extra);
        resMap.put("ConnectorID", String.format("%s%02d", epCode, epGunNo));//pile_code 是 string 充电桩编码
        resMap.put("StartChargeSeqStat", Strings.getIntValue(realData, "3_1"));
        resMap.put("ConnectorStatus", Strings.getIntValue(realData, "3_1"));

        int v = Strings.getIntValue(realData, "3_44");
        resMap.put("CurrentA", v);//A相电流
        v = Strings.getIntValue(realData, "3_45");
        resMap.put("CurrentB", v);//B相电流
        v = Strings.getIntValue(realData, "3_46");
        resMap.put("CurrentC", v);//C相电流

        v = Strings.getIntValue(realData, "3_41");
        resMap.put("VoltageA", v);//A相电压
        v = Strings.getIntValue(realData, "3_42");
        resMap.put("VoltageB", v);//B相电压
        v = Strings.getIntValue(realData, "3_43");
        resMap.put("VoltageC", v);//C相电压
        v = Strings.getIntValue(realData, "3_5");
        resMap.put("soc", NumUtil.intToBigDecimal2(v).multiply(new BigDecimal(10)));//剩余电量（ 汽车电量的百分比）
        v = Strings.getIntValue(realData, "3_6");
        resMap.put("StartTime", DateUtil.StringYourDate(DateUtil.getAddMinute(new Date(), -v)));//开始充电时间
        resMap.put("EndTime", DateUtil.currentStringDate());

        v = Strings.getIntValue(realData, "4_4");
        resMap.put("TotalPower", NumUtil.intToBigDecimal2(v));//当前已经充电的电量
        resMap.put("ServiceMoney", NumUtil.intToBigDecimal2(v).multiply(new BigDecimal(String.valueOf(servicePrice))));//当前服务费金额

        v = Strings.getIntValue(realData, "4_2");
        resMap.put("ElecMoney", NumUtil.intToBigDecimal2(v));//当前电费
        resMap.put("TotalMoney", ((BigDecimal) resMap.get("ElecMoney")).subtract((BigDecimal) resMap.get("ServiceMoney")));//当前充电电费金额

        return resMap;
    }

    public static Map<String, Object> getOnChargeOrder(String epCode, int epGunNo, String token, int start_time, int end_time, float money,
                                                       float elect_money, float service_money, float elect) {
        HashMap<String, Object> resMap = new HashMap<String, Object>();

        resMap.put("StartChargeSeq", token);//充电订单号
        //充电桩编码
        resMap.put("ConnectorID", String.format("%s%02d", epCode, epGunNo));//pile_code 是 string 充电桩编码
        //start_time 是 int 充电开始时间（ 秒格式 Unix 时间戳）
        resMap.put("StartTime", DateUtil.longDateToString(new Long(start_time) * 1000));

        //end_time 是 int 充电结束时间（ 秒格式 Unix 时间戳）
        resMap.put("EndTime", DateUtil.longDateToString(new Long(end_time) * 1000));

        resMap.put("TotalPower", new BigDecimal(String.valueOf(elect)).setScale(2, BigDecimal.ROUND_HALF_UP).toString());

        //elect_money 是 float 本次充电电费金额
        resMap.put("TotalElecMoney", new BigDecimal(String.valueOf(elect_money)).setScale(2, BigDecimal.ROUND_HALF_UP).toString());

        //service_money 是 float 本次充电服务费金额
        resMap.put("TotalSeviceMoney", new BigDecimal(String.valueOf(service_money)).setScale(2, BigDecimal.ROUND_HALF_UP).toString());

        //money 是 float 本次充电消费总金额（ 电费+服务费）
        resMap.put("TotalMoney", new BigDecimal(String.valueOf(money)).setScale(2, BigDecimal.ROUND_HALF_UP).toString());

        resMap.put("StopReason",0);

        resMap.put("WorkDate",DateUtil.toString(new Date(),DateUtil.DATE_FORMAT_SHORT01));

        return resMap;
    }

    public static String getToken(int org, String operatorID, String operatorSecret,
                                  String dataSecret, String dataSecretIv, String sigSecret) {
        HashMap<String, String> dataParam = new HashMap<>();
        LOGGER.info("getShenZhenToken answerStr is begin ");
        dataParam.put("OperatorID", operatorID);
        dataParam.put("OperatorSecret", operatorSecret);
        JSONObject jsonObject = JSONObject.fromObject(dataParam);
        String data;
        String decryptToken;
        try {
            LOGGER.debug("getShenZhenToken answerStr is 1 jsonObject={}", jsonObject.toString());
            LOGGER.debug("getShenZhenToken answerStr is 1 operatorID={}", operatorID);
            LOGGER.debug("getShenZhenToken answerStr is 1 operatorSecret={}", operatorSecret);
            LOGGER.debug("getShenZhenToken answerStr is 1 dataSecret={}", dataSecret);
            LOGGER.debug("getShenZhenToken answerStr is 1 dataSecretIv={}", dataSecretIv);
            LOGGER.debug("getShenZhenToken answerStr is 1 sigSecret={}", sigSecret);
            data = AesCBC.getInstance().encrypt(jsonObject.toString(), "utf-8", dataSecret, dataSecretIv);
            //生成签名
            LOGGER.info("getShenZhenToken answerStr is 2 data={}", data);
            HashMap<String, String> map = SigTool.makeSig(data, operatorID, sigSecret);
            LOGGER.info("getShenZhenToken answerStr is 3 ,map:{}", map);
            //发送请求
            String answerStr = HttpUtils.httpJSONPost(CooperateFactory.getCoPush(org).getTokenUrl(), map, null);
            LOGGER.info("getShenZhenToken answerStr:{}", answerStr);
            //将String转成Map
            JSONObject retMap = JSONObject.fromObject(answerStr);
            decryptToken = AesCBC.getInstance().decrypt(retMap.getString("Data"), "utf-8", dataSecret, dataSecretIv);
            //记录返回结果

        } catch (Exception e) {
            decryptToken = "";
            LOGGER.info("getShenZhenToken exception:{}", e.getMessage());
        }

        return decryptToken;
    }

}
