package com.cooperate.TCEC.EVC;

import com.cooperate.CooperateFactory;
import com.cooperate.TCEC.util.CommonPush;
import com.cooperate.TCEC.util.CommonService;
import com.cooperate.TCEC.util.TokenModel;
import com.cooperate.constant.KeyConsts;
import com.cooperate.utils.Strings;
import com.ec.constants.Symbol;
import com.ec.constants.UserConstants;
import com.ec.netcore.core.pool.TaskPoolFactory;
import com.ec.utils.LogUtil;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.util.Date;
import java.util.Iterator;
import java.util.Map;
import java.util.concurrent.ConcurrentHashMap;
import java.util.concurrent.TimeUnit;

public class TCECEVCService {
    private static final Logger logger = LoggerFactory.getLogger(TCECEVCService.class);


    /**
     * 实时数据key:epCode+epGun|time|send_url
     * 消费记录key:epCode+epGun|time|send_url
     */
    private static ConcurrentHashMap<String, Map<String, Object>> mapRealData = new ConcurrentHashMap<>();

    public static Map<String, Object> getRealData(String key) {
        return mapRealData.get(key);
    }

    public static void addRealData(String key, Map<String, Object> pointMap) {
        mapRealData.put(key, pointMap);
    }

    public static void removeRealData(String key) {
        mapRealData.remove(key);
    }


    private static void send2EVC(String url, Map<String, Object> params) {
        TokenModel tokenModel = getTokenModel(UserConstants.ORG_EVC);
        CommonService.send2TCEC(tokenModel, url, params);

    }

    private static String getEVCToken(TokenModel tokenModel) {
        String operatorID = TCECEVCPush.OPERATOR_ID;
        String operatorSecret = TCECEVCPush.OPERATOR_SECRET;
        String dataSecret = TCECEVCPush.DATA_SECRET;
        String dataSecret_iv = TCECEVCPush.DATA_SECRET_IV;
        String sigSecret = TCECEVCPush.SIG_SECRET;

        String decryptToken = CommonPush.getToken(UserConstants.ORG_EVC,
                operatorID, operatorSecret, dataSecret, dataSecret_iv, sigSecret);
        logger.info("getEVCToken decryptToken:{}", decryptToken);
        if (Strings.isNullOrEmpty(decryptToken)) {
            return null;
        }
        CommonPush.handleToken(decryptToken, tokenModel);
        logger.info("getEVCToken tokenAvailableTime:{}", tokenModel.getTokenAvailableTime());
        logger.info("getEVCToken StaticToken:{}", tokenModel.getStaticToken());
        CommonPush.updateToken(UserConstants.ORG_EVC, tokenModel);
        return tokenModel.getStaticToken();
    }

    public static void startPushTimeout(long initDelay) {
        logger.info("startPushTimeout EVC is begin;delay:{}", initDelay);
        CheckTCECEVCPushTask checkTask = new CheckTCECEVCPushTask();
        TaskPoolFactory.scheduleAtFixedRate("TCEC_EVC_PUSH_TIMEOUT_TASK", checkTask, initDelay,
                CooperateFactory.getCoPush(UserConstants.ORG_EVC).getPeriod(), TimeUnit.SECONDS);
    }

    @SuppressWarnings({"rawtypes", "unchecked"})
    public static void checkPushTimeout() {
        try {
            Iterator iter = mapRealData.entrySet().iterator();
            while (iter.hasNext()) {
                Map.Entry entry = (Map.Entry) iter.next();
                Map<String, Object> pointMap = (Map<String, Object>) entry.getValue();
                String key = (String) entry.getKey();
                String[] val = key.split(Symbol.SHUXIAN_REG);
                if (val.length == 3) {
                    if (KeyConsts.STATUS_CHANGE_URL.equals(val[2])) {
                        send2EVC(CooperateFactory.getCoPush(UserConstants.ORG_EVC).getStatusChangeUrl(), pointMap);
                    } else if (KeyConsts.ORDER_URL.equals(val[2])) {
                        send2EVC(CooperateFactory.getCoPush(UserConstants.ORG_EVC).getOrderUrl(), pointMap);
                    } else if (KeyConsts.STOP_CHARGE_RESP_URL.equals(val[2])) {
                        send2EVC(CooperateFactory.getCoPush(UserConstants.ORG_EVC).getStopchargeRespUrl(), pointMap);
                    } else if (KeyConsts.CHARGE_RESP_URL.equals(val[2])) {
                        send2EVC(CooperateFactory.getCoPush(UserConstants.ORG_EVC).getChargeRespUrl(), pointMap);
                    } else if (KeyConsts.REAL_DATA_URL.equals(val[2])) {
                        send2EVC(CooperateFactory.getCoPush(UserConstants.ORG_EVC).getRealDataUrl(), pointMap);
                    }
                }
                removeRealData(key);
            }
        } catch (Exception e) {
            logger.error(LogUtil.addExtLog("exception"), e.getMessage());
        }
    }

    //    public static void checkPushTimeoutTest() {
//        logger.info("GuoWang test push is begin");
//        logger.info("checkPushTimeout mapRealData:{}", mapRealData);
//        TokenModel tokenModel = getTokenModel();
//        logger.info("checkPushTimeout tokenModel:{}", JSON.toJSONString(tokenModel));
//        try {
//            Iterator iter = mapRealData.entrySet().iterator();
//            while (iter.hasNext()) {
//                Map.Entry entry = (Map.Entry) iter.next();
//                Map<String, Object> pointMap = (Map<String, Object>) entry.getValue();
//                String key = (String) entry.getKey();
//
//                String[] val = key.split(Symbol.SHUXIAN_REG);
//                if (val.length == 3) {
//                    if (KeyConsts.STATUS_CHANGE_URL.equals(val[2])) {
//                        tokenModel = CommonService.sendEpStatusChange(tokenModel, pointMap);
//                    } else if (KeyConsts.ORDER_URL.equals(val[2])) {
//                        tokenModel = CommonService.sendOrderInfo(tokenModel, pointMap);
//                    } else if (KeyConsts.STOP_CHARGE_RESP_URL.equals(val[2])) {
//                        tokenModel = CommonService.sendStopChargeResp(tokenModel, pointMap);
//                    } else if (KeyConsts.CHARGE_RESP_URL.equals(val[2])) {
//                        tokenModel = CommonService.sendChargeResp(tokenModel, pointMap);
//                    } else if (KeyConsts.REAL_DATA_URL.equals(val[2])) {
//                        tokenModel = CommonService.sendRealData(tokenModel, pointMap);
//                    }
//                    staticToken = tokenModel.getStaticToken();
//                    tokenAvailableTime = tokenModel.getTokenAvailableTime();
//                }
//                removeRealData(key);
//            }
//        } catch (Exception e) {
//            logger.error(LogUtil.addExtLog("exception"), e.getMessage());
//        }
    private static TokenModel getTokenModel(int org) {

        TokenModel tokenModel = CommonPush.getCacheData(org);
        if (tokenModel != null) {
            return tokenModel;
        }
        tokenModel = new TokenModel();
        tokenModel.setOrg(UserConstants.ORG_EVC);
        tokenModel.setStaticToken("");
        tokenModel.setTokenAvailableTime(new Date());
        tokenModel.setOperatorId(TCECEVCPush.OPERATOR_ID);
        tokenModel.setOperatorSecret(TCECEVCPush.OPERATOR_SECRET);
        tokenModel.setDataSecret(TCECEVCPush.DATA_SECRET);
        tokenModel.setDataSecretIv(TCECEVCPush.DATA_SECRET_IV);
        tokenModel.setSigSecret(TCECEVCPush.SIG_SECRET);
        return tokenModel;
    }
}



